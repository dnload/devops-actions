name: SonarQube Analysis
description: Run SonarQube analysis
inputs:
  sonar_token:
    description: 'SonarQube token'
    required: true
  sonar_host_url:
    description: 'SonarQube host URL'
    required: true
  sonar_project_key:
    description: 'SonarQube project key'
    required: true
  sonar_project_name:
    description: 'SonarQube project name'
    required: true
  analysis_sources:
    description: 'Analysis sources'
    required: true
  is_build_wrapper:
    description: 'Is build wrapper'
    required: false
    default: "false"
  build_command:
    description: 'Build command'
    required: false
    default: ""
  bw_output_path:
    description: 'Build wrapper output path'
    required: false
    default: "./bw-output"
  sonar_exclusions:
    description: 'Sonar exclusions'
    required: false
    default: ""
  sonar_coverage_exclusions:
    description: 'Sonar coverage exclusions'
    required: false
    default: ""
  sonar_llvm_cov_report_path:
    description: 'Sonar LLVM coverage report path'
    required: false
    default: ""
  is_rust_project:
    description: 'Is Rust project'
    required: false
    default: "false"
  clippy_report_path:
    description: 'Clippy report path'
    required: false
    default: "clippy-report.json"
  sonar_quality_gate:
    description: 'Sonar quality gate'
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    # Install Build Wrapper
    - name: Install Build Wrapper
      if: ${{ inputs.is_build_wrapper == 'true' }}
      uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5
      env:
        SONAR_HOST_URL: ${{ inputs.sonar_host_url }}

    # Legacy C/C++ build-wrapper
    - name: Make and build
      if: ${{ inputs.is_build_wrapper == 'true' }}
      shell: bash
      run: |
        build-wrapper-linux-x86-64 --out-dir ${{ inputs.bw_output_path }} ${{ inputs.build_command }}

    # Rust Clippy report
    - name: Create cargo clippy report
      if: ${{ inputs.is_rust_project == 'true' }}
      shell: bash
      continue-on-error: true
      run: |
        cargo clippy --message-format=json > ${{ inputs.clippy_report_path }}

    - name: Prepare SonarQube URL
      id: prepare_url
      shell: bash
      run: |
        SONAR_URL="${{ inputs.sonar_host_url }}"
        if [[ ! $SONAR_URL =~ ^https?:// ]]; then
          SONAR_URL="https://$SONAR_URL"
        fi
        echo "sonar_url=$SONAR_URL" >> $GITHUB_OUTPUT

    - name: Run SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_HOST_URL: ${{ steps.prepare_url.outputs.sonar_url }}
      with:
        args: >
          --define sonar.projectKey=${{ inputs.sonar_project_key }}
          --define sonar.projectName=${{ inputs.sonar_project_name }}
          --define sonar.login=${{ inputs.sonar_token }}
          --define sonar.sourceEncoding=UTF-8
          --define sonar.sources=${{ inputs.analysis_sources }}
          --define sonar.python.version=3.8,3.9,3.10,3.11,3.12
          --define sonar.cfamily.compile-commands=${{ inputs.bw_output_path }}/compile_commands.json
          --define sonar.exclusions="${{ inputs.sonar_exclusions }}"
          --define sonar.coverage.exclusions="${{ inputs.sonar_coverage_exclusions }}"
          --define sonar.cfamily.llvm-cov.reportPath="${{ inputs.sonar_llvm_cov_report_path }}"
          ${{ inputs.sonar_quality_gate == 'true' && '--define sonar.qualitygate.wait=true' || '' }}

    - name: SonarQube Quality Gate
      if: ${{ inputs.sonar_quality_gate == 'true' }}
      uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
        SONAR_HOST_URL: ${{ inputs.sonar_host_url }}
